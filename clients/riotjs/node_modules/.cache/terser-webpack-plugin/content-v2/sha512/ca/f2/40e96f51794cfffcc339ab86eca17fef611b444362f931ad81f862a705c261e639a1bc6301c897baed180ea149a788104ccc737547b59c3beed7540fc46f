{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{210:function(t,e,a){\"use strict\";a.r(e);a(8),a(65);var i=a(17);a(1).tag2(\"download-tasks\",'<breadcrumb current=\"Dashboard Summary\" mode=\"project\" ref=\"breadcrumb\"></breadcrumb> <div class=\"br-pagebody pd-x-20 pd-sm-x-30\"> <div class=\"row\"> <div class=\"col-md-12\"> <div class=\"widget-2\"> <div class=\"card shadow-base overflow-hidden\"> <div class=\"card-header borderbottom0\"> <div class=\"media-body mg-t-10 mg-b-10\"> <div class=\"row\"> <div class=\"col-10 my-auto\"> <h4 class=\"tx-normal tx-roboto tx-inverse mg-b-5\">Background Tasks</h4> </div> <div class=\"col-2 my-auto text-center d-flex justify-content-center\"> <button onclick=\"{refresh}\" class=\"{isRefreshActive ? \\'btn-outline-light\\' :\\'cursor-pointer btn-outline-primary \\'} btn btn-block mg-b-0 mg-t-0 mg-r-10 mg-t-0-r10 width100 mobilesbutton mgt-mobile-max-415\" 2> <i if=\"{isRefreshActive}\" class=\"fa fa-spinner fa-spin mg-r-10\"></i> <i if=\"{!isRefreshActive}\" class=\"fa fa-refresh mg-r-10\"></i> Refresh </button> </div> </div> </div> </div> </div> </div> </div> </div> </div> <div class=\"br-pagebody pd-x-20 pd-sm-x-30\"> <div class=\"row\"> <div class=\"col-md-12\"> <div class=\"widget-2\"> <div class=\"dropdown-menu bg-white pd-0 wd-sm pos-static ft-none show\"> <ul class=\"nav nav-tabs nav-tabs-style-1 tx-13\" role=\"tablist\"> <li class=\"nav-item\"> <a class=\"nav-link pd-y-10 active\" data-toggle=\"tab\" href=\"#tabRegular\" role=\"tab\" onclick=\"{updateTabActive}\">Active <b>({totalActiveTask})</b></a> </li> <li class=\"nav-item\"> <a class=\"nav-link pd-y-10\" data-toggle=\"tab\" href=\"#tabExtended\" role=\"tab\" onclick=\"{updatedTabComplete}\">Complete <b>({totalCompleteTask})</b></a> </li> </ul> <div class=\"tab-content pd-30\"> <div class=\"tab-pane active\" id=\"tabRegular\" role=\"tabpanel\"> <table class=\"table table-stripped\"> <thead style=\"background-color: #BBB;\"> <tr> <th width=\"20\">#</th> <th width=\"150\">Type</th> <th width=\"300\">Name</th> <th width=\"150\">Created At</th> <th width=\"80\">Status</th> <th width=\"200\">Actions</th> </tr> </thead> <tbody> <tr if=\"{activeTask.length == 0}\"> <td colspan=\"6\" class=\"text-center\">No Active Task Yet</td> </tr> </tbody> <tbody if=\"{activeTask.length > 0}\" each=\"{item, i in activeTask}\"> <tr> <td>{++i}</td> <td>{item.type_format}</td> <td> <p>id <b>{item.id}</b></p> {item.name} </td> <td>{item.createdAt}</td> <td>{item.state}</td> <td> <button type=\"button\" onclick=\"{() => showDetail(item.id, item.type, item.labels, ⁗active⁗, --i)}\" class=\"ml-1 mr-1 btn btn-info btn-sm cursor-pointer\" if=\"{item.isShowDetailActive ? ⁗disabled⁗ : ⁗enabled⁗}\"> <i if=\"{item.isShowDetailActive}\" class=\"fa fa-spinner fa-spin mg-r-10\"></i> Detail </button> <button if=\"{item.action.canStop}\" onclick=\"{() => this.stop(item.id, item.type, ⁗active⁗, --i)}\" type=\"button\" class=\"ml-1 mr-1 btn btn-warning btn-sm cursor-pointer\" if=\"{item.isStopActive ? ⁗disabled⁗ : ⁗enabled⁗}\"> <i if=\"{item.isStopActive}\" class=\"fa fa-spinner fa-spin mg-r-10\"></i> Stop </button> <button if=\"{item.action.canStart}\" onclick=\"{() => this.start(item.id, item.type, false, ⁗active⁗, --i)}\" class=\"ml-1 mr-1 btn btn-success btn-sm cursor-pointer\" if=\"{item.isStartActive ? ⁗disabled⁗ : ⁗enabled⁗}\"> <i if=\"{item.isStartActive}\" class=\"fa fa-spinner fa-spin mg-r-10\"></i> Start </button> </td> </tr> </tbody> </table> </div> <div class=\"tab-pane\" id=\"tabExtended\" role=\"tabpanel\"> <table class=\"table table-stripped\"> <thead style=\"background-color: #BBB;\"> <tr> <th width=\"20\">#</th> <th width=\"150\">Type</th> <td width=\"300\"></td> <th width=\"150\">Created At</th> <th width=\"80\">Status</th> <th width=\"200\">Actions</th> </tr> </thead> <tbody> <tr if=\"{completeTask.length == 0}\"> <td colspan=\"6\" class=\"text-center\">No Complete Task Yet</td> </tr> <tr each=\"{item, i in completeTask}\"> <td>{++i}</td> <td>{item.type_format}</td> <td> <p>id <b>{item.id}</b></p> {item.name} </td> <td>{item.createdAt}</td> <td>{item.state}</td> <td> <button type=\"button\" onclick=\"{() => showDetail(item.id, item.type, item.labels, ⁗complete⁗, --i)}\" class=\"ml-1 mr-1 btn btn-info btn-sm cursor-pointer\" if=\"{item.isShowDetailActive ? ⁗disabled⁗ : ⁗enabled⁗}\"> <i if=\"{item.isShowDetailActive}\" class=\"fa fa-spinner fa-spin mg-r-10\"></i> Detail </button> <button if=\"{item.action.canStart}\" onclick=\"{() => this.start(item.id, item.type,true, ⁗complete⁗, --i)}\" type=\"button\" class=\"ml-1 mr-1 btn btn-success btn-sm cursor-pointer\" if=\"{item.isStartActive ? ⁗disabled⁗ : ⁗enabled⁗}\"> <i if=\"{item.isStartActive}\" class=\"fa fa-spinner fa-spin mg-r-10\"></i> Restart </button> <button if=\"{item.action.canDownload}\" onclick=\"{() => this.downloadFile(item.downloadLink)}\" type=\"button\" class=\"ml-1 mr-1 btn btn-primary btn-sm cursor-pointer\"> Download </button> <button if=\"{item.action.canDelete}\" onclick=\"{() => this.remove(item.id, item.type, ⁗complete⁗, --i)}\" type=\"button\" class=\"ml-1 mr-1 btn btn-danger btn-sm cursor-pointer\" if=\"{item.isDeleteActive ? ⁗disabled⁗ : ⁗enabled⁗}\"> <i if=\"{item.isDeleteActive}\" class=\"fa fa-spinner fa-spin mg-r-10\"></i> Delete </button> </td> </tr> </tbody> </table> <div class=\"pagination-box ht-80 d-flex align-items-center justify-content-between\"> <div class=\"p-2 mr-auto\"> &nbsp;Showing {pagination.pages} to {pagination.pages} of {pagination.total_data} entries </div> <div> <select class=\"form-control select2 mg-t-20\" data-placeholder=\"Item Limit\" ref=\"pageLimit\" onchange=\"{changeLimit}\"> <option value=\"10\">10</option> <option value=\"20\">20</option> <option value=\"50\">50</option> <option value=\"100\">100</option> </select> </div> <div> <pagging pagination=\"{pagination}\"></pagging> </div> </div> </div> </div> </div> </div> </div> </div> </div> <labeldetailmodal data=\"{labelDetail.data}\"></labelDetailModal>','download-tasks .pagination-box > div,[data-is=\"download-tasks\"] .pagination-box > div{ margin: 6px; }',\"\",(function(t){const e=this;this.labelDetail={data:{}},this.isRefreshActive=!1,this.noTask=!0,this.noTask=!0,this.activeTask=[],this.readyTask=[],this.completeTask=[],this.totalCompleteTask=0,this.totalActiveTask=0,this.autoReloadRunning=!1,this.autoReloadInterval=()=>{setInterval(async()=>{this.autoReloadRunning||(this.autoReloadRunning=!0,Promise.all([this.getActiveTask(),this.getCompleteTask()]).then(t=>{this.autoReloadRunning=!1}))},1e4)},this.query={limit:pageLimit,page:1,total_data:0,pages:0},this.pagination={page:1,cb:async t=>{this.query.page=t,await this.getCompleteTask()}},this.changeLimit=async t=>{t.preventDefault(),this.query.limit=parseInt(t.target.value),this.query.page=1,this.pagination.page=1,await this.getCompleteTask()},this.on(\"mount\",()=>{Promise.all([this.getActiveTask(),this.getCompleteTask()]).then(t=>{console.log(\"sucess\")})}),$(\"#labelDetailModal\").on(\"hidden.bs.modal\",(function(t){e.labelDetail.data={}})),this.showDetail=async(t,e,a,s,o)=>{this.toggleButton(s,o,\"isShowDetailActive\");try{if(0==a.length){let e=await this.apiGet({path:\"task\",data:{id:t,page:1,limit:1,state:0,field:\"label\"}});a=_.result(e,\"result.data.0.labels\",[]),t=_.result(e,\"result.data.0.id\",\"\"),a.length>0&&\"active\"==s?this.activeTask[o]={...this.activeTask[o],labels:a}:a.length>0&&\"complete\"==s&&(this.completeTask[o]={...this.completeTask[o],labels:a})}a.length>0&&(i.labels.hasOwnProperty(e)?(this.labelDetail={data:i.labels[e].formatForDisplayByLabel(a)},$(\"#labelDetailModal\").modal(\"toggle\"),this.update()):$.notify(\"type not found\",\"error\"),this.toggleButton(s,o,\"isShowDetailActive\"))}catch(t){throw this.toggleButton(s,o,\"isShowDetailActive\"),t}},this.downloadFile=async t=>{try{if(t&&\"\"==t)throw\"donwload link not valid\";let e=`task/download?filename=${t}&token=${localStorage.AuthToken}`,a=APP.apiUrl+e;window.open(a,\"_blank\")}catch(t){$.notify(\"download failed \"+t,\"error\")}},this.refresh=async()=>{this.isRefreshActive=!0,this.update(),await Promise.all([this.getActiveTask(),this.getCompleteTask()]),this.isRefreshActive=!1,this.update()},this.start=async(t,e,a,i,s)=>{this.toggleButton(i,s,\"isStartActive\");try{await this.apiPut({path:\"task/start\",data:{id:t,type:e}});$.notify(`starting task ${e} ${t} sucess`,\"info\"),a?(this.toggleButton(i,s,\"isStartActive\"),await Promise.all([this.getActiveTask(),this.getCompleteTask()])):(this.toggleButton(i,s,\"isStartActive\"),await this.getActiveTask())}catch(t){this.toggleButton(i,s,\"isStartActive\"),$.notify(\"starting task error\",\"error\")}},this.stop=async(t,e,a,i)=>{this.toggleButton(a,i,\"isStopActive\");try{await this.apiPut({path:\"task/stop\",data:{id:t,type:e}});this.toggleButton(a,i,\"isStopActive\"),$.notify(`stoping task ${e} ${t} sucess`,\"info\"),await Promise.all([this.getActiveTask(),this.getCompleteTask()])}catch(t){this.toggleButton(a,i,\"isStopActive\"),$.notify(\"stoping task error\",\"error\")}},this.toggleButton=(t,e,a=\"\")=>{\"active\"==t?this.activeTask[e]={...this.activeTask[e],[a]:!_.result(this.activeTask[e],a,!1)}:\"complete\"==t&&(this.completeTask[e]={...this.completeTask[e],[a]:!_.result(this.completeTask[e],a,!1)}),this.update()},this.remove=async(t,e,a,i)=>{try{this.toggleButton(a,i,\"isDeleteActive\");await this.apiPost({path:\"task/delete\",data:{id:t,type:e}});$.notify(`deleting task ${e} ${t} sucess`,\"info\"),this.toggleButton(a,i,\"isDeleteActive\"),await this.getCompleteTask()}catch(t){this.toggleButton(a,i,\"isDeleteActive\"),$.notify(\"deleting task error\",\"error\")}},this.formatExportStreamTask=function(t={},e=1){JSON.parse(t.payload);let a=JSON.parse(t.output);return t.type_format=\"Export Stream\",t.state=this.renderState(Number(a.state)),7==a.state&&2==e&&(t.state=\"interupted\"),t.action=this.renderButtonAction(a),t.filename=a.filename,t.downloadLink=_.result(a,\"filename.filename\",\"\"),t},this.formatTask=function(t={},e={},a=1){switch(t.isStopActive=_.result(e,\"isStopActive\",!1),t.isStartActive=_.result(e,\"isStartActive\",!1),t.isDeleteActive=_.result(e,\"isDeleteActive\",!1),t.isShowDetailActive=_.result(e,\"isShowDetailActive\",!1),t.createdAt=moment(t.createdAt).format(\"YYYY-MM-DD HH:mm\"),t.type){case\"export_stream\":t=this.formatExportStreamTask(t,a)}return t},this.renderState=function(t){let e=\"\";switch(t){case 0:e=\"pending\";break;case 1:e=\"on process\";break;case 2:e=\"complete\";break;case 3:e=\"finish\";break;case 4:e=\"failed\";break;case 5:e=\"dead\";break;case 6:e=\"waiting\";break;case 7:e=\"interupt\";break;default:return\"-\"}return e},this.renderButtonAction=function(t={},e,a){let i={};switch(i={canDetail:!0},!0){case[1,0,6].includes(t.state):i.canStop=!0;break;case[2].includes(t.state):i.canDownload=!0,i.canDelete=!0;break;case[2].includes(t.state):i.canDelete=!0;case[4].includes(t.state):i.canDelete=!0,i.canStart=!0;break;case[7].includes(t.state):i.canDelete=!0;break;default:i.canStart=!0}return i},this.apiPut=async function(t){return new Promise((e,a)=>{t={...t,success:function(t){e(t)},error:function(t,e,i){a(t,e,i)}},APP.apiPut(t)})},this.apiPost=async function(t){return new Promise((e,a)=>{t={...t,success:function(t){e(t)},error:function(t,e,i){a(t,e,i)}},APP.apiPost(t)})},this.apiGet=async function(t){return new Promise((e,a)=>{t={...t,success:function(t){e(t)},error:function(t,e,i){a(t,e,i)}},APP.apiGet(t)})},this.getActiveTask=async function(){try{let t=await Promise.all([this.apiGet({path:\"task\",data:{page:1,limit:1e3,state:3,field:\"namespace,payload,output,name,type\",user_id:localStorage.userid}}),this.apiGet({path:\"task\",data:{page:1,limit:1e3,state:1,field:\"namespace,payload,output,name,type\",user_id:localStorage.userid}})]);if(this.activeTask=[..._.result(t,\"0.result.data\",[]),..._.result(t,\"1.result.data\",[])],this.activeTask.length>0){let t=t=>this.activeTask.filter(e=>e.id==t);this.activeTask=this.activeTask.map(e=>this.formatTask(e,_.result(t(e.id),\"0\",{}),1))}else this.activeTask=[];this.totalActiveTask=_.result(t,\"0.result.meta.totalData\",0)+_.result(t,\"1.result.meta.totalData\",0),this.update()}catch(t){$.notify(\"get active task error \"+t,\"error\")}},this.updateTabActive=async()=>{await this.getActiveTask()},this.updatedTabComplete=async()=>{await this.getCompleteTask()},this.getCompleteTask=async()=>{try{let t=await this.apiGet({path:\"task\",data:{...this.query,state:2,field:\"namespace,payload,output,name,type\",user_id:localStorage.userid}});if(_.result(t,\"result.data\",[]).length>0){let e=t=>this.completeTask.filter(e=>e.id==t);this.completeTask=t.result.data.map(t=>this.formatTask(t,_.result(e(t.id),\"0\",{}),2))}else this.completeTask=[];this.totalCompleteTask=_.result(t,\"result.meta.totalData\",0),this.pagination.pages=_.result(t,\"result.meta.totalPage\",0),this.pagination.total_data=_.result(t,\"result.meta.totalData\",0),this.update()}catch(t){$.notify(\"get complete task error \"+t,\"error\")}}}))}}]);","extractedComments":[]}